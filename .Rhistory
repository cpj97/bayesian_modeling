median = median(value),
lower = quantile(value, 0.025),
upper = quantile(value, 0.975)
) %>%
mutate(label = X_labels[covariate]) %>%
select(label, mean, median, lower, upper)
# Create a table grob
table_grob <- tableGrob(
summary_table,
rows = NULL
)
# Create title as a grob
title <- textGrob(
"Posterior Summaries for Global Slopes (mu_beta)",
gp = gpar(fontsize = 16, fontface = "bold")
)
# Plot the table in the Plots panel
grid.newpage()
grid.arrange(title, table_grob, nrow = 2, heights = c(0.1, 1))
# Table summary of global slopes -------------------------------------------------------------------------
# Create the table object
summary_table <- draws %>%
as_draws_df() %>%
select(starts_with("mu_beta")) %>%
pivot_longer(everything(), names_to = "parameter", values_to = "value") %>%
mutate(covariate = as.integer(str_extract(parameter, "\\d+"))) %>%
group_by(covariate) %>%
summarise(
mean = mean(value),
median = median(value),
lower = quantile(value, 0.025),
upper = quantile(value, 0.975)
) %>%
mutate(label = X_vars[covariate]) %>%
select(label, mean, median, lower, upper)
# Create a table grob
table_grob <- tableGrob(
summary_table,
rows = NULL
)
# Create title as a grob
title <- textGrob(
"Posterior Summaries for Global Slopes",
gp = gpar(fontsize = 16, fontface = "bold")
)
# Plot the table in the Plots panel
grid.newpage()
grid.arrange(title, table_grob, nrow = 2, heights = c(0.1, 1))
ggplot(heat_df, aes(x = covariate_label, y = fct_reorder(department, dept), fill = mean_slope)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "darkred", mid = "white", high = "darkblue", midpoint = 0) +
theme_minimal(base_size = 12) +
labs(
title = "Mean Department Slopes by Covariate",
x = "Covariate",
y = "Department",
fill = "Slope"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Heatmap of department-specific slopes ------------------------------------------
heat_df <- draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
group_by(dept, covariate) %>%
summarise(mean_slope = mean(beta_dept), .groups = "drop") %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
mutate(covariate_label = X_vars[covariate])
ggplot(heat_df, aes(x = covariate_label, y = fct_reorder(department, dept), fill = mean_slope)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "darkred", mid = "white", high = "darkblue", midpoint = 0) +
theme_minimal(base_size = 12) +
labs(
title = "Mean Department Slopes by Covariate",
x = "Covariate",
y = "Department",
fill = "Slope"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Extract Bayesian R^2 (from previous posterior draws)
bayes_r2_median <- median(bayes_r2)
ggplot(data.frame(y_obs = data_stan$y, y_pred = y_hat_mean),
aes(x = y_pred, y = y_obs)) +
geom_point(alpha = 0.3, color = "steelblue", size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "darkred", linewidth = 0.5) +
theme_minimal(base_size = 14) +
labs(
title = "Observed vs Predicted Security Index",
x = "Predicted",
y = "Observed",
caption = paste0("RMSE = ", round(rmse, 3),
" | Bayesian R² = ", round(bayes_r2_median, 3))
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 12, face = "italic", color = "gray30")
)
# R squared ---------------------------------------------------------------
# Extract draws of bayes_R2
bayes_r2 <- as_draws_df(draws)$bayes_R2
ggplot(data.frame(bayes_r2), aes(x = bayes_r2)) +
geom_density(fill = "skyblue", color = "skyblue4", alpha = 0.8) +
geom_vline(aes(xintercept = median(bayes_r2)),
linetype = "dashed", color = "gray30", linewidth = 0.8) +
annotate("text",
x = median(bayes_r2), y = Inf,
label = paste0("Median = ", round(median(bayes_r2), 2)),
vjust = -0.5, hjust = 0.5,
size = 4, color = "gray30") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 16),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 12),
plot.margin = margin(10, 20, 10, 10)
) +
labs(
title = "Posterior Distribution of Bayesian R²",
x = expression(Bayesian ~ R^2),
y = "Posterior Sample Frequency",
caption = paste0("RMSE = ", round(rmse, 3),
" | Bayesian R² = ", round(bayes_r2_median, 3))
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 12, face = "italic", color = "gray30")
)
y_hat_mean_rescaled <- y_hat_mean * sd_y + mean_y
y_obs_rescaled <- data_stan$y * sd_y + mean_y
# Recalculate RMSE on the original scale
rmse_rescaled <- sqrt(mean((y_obs_rescaled - y_hat_mean_rescaled)^2))
y_hat_mean_rescaled <- y_hat_mean * sd_y + mean_y
mean_y <- mean(data1$SEG, na.rm = TRUE)
sd_y <- sd(data1$SEG, na.rm = TRUE)
y_hat_mean_rescaled <- y_hat_mean * sd_y + mean_y
y_obs_rescaled <- data_stan$y * sd_y + mean_y
# Recalculate RMSE on the original scale
rmse_rescaled <- sqrt(mean((y_obs_rescaled - y_hat_mean_rescaled)^2))
ggplot(data.frame(y_obs = y_obs_rescaled, y_pred = y_hat_mean_rescaled),
aes(x = y_pred, y = y_obs)) +
geom_point(alpha = 0.3, color = "steelblue", size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "darkred", linewidth = 0.5) +
theme_minimal(base_size = 14) +
labs(
title = "Observed vs Predicted SEG (Rescaled)",
x = "Predicted SEG",
y = "Observed SEG",
caption = paste0("RMSE = ", round(rmse_rescaled, 3),
" | Bayesian R² = ", round(bayes_r2_median, 3))
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 12, face = "italic", color = "gray30")
)
ggplot(data.frame(bayes_r2), aes(x = bayes_r2)) +
geom_density(fill = "skyblue", color = "skyblue4", alpha = 0.8) +
geom_vline(aes(xintercept = median(bayes_r2)),
linetype = "dashed", color = "gray30", linewidth = 0.8) +
annotate("text",
x = median(bayes_r2), y = Inf,
label = paste0("Median = ", round(median(bayes_r2), 2)),
vjust = -0.5, hjust = 0.5,
size = 4, color = "gray30") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 16),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 12),
plot.margin = margin(10, 20, 10, 10)
) +
labs(
title = "Posterior Distribution of Bayesian R²",
x = expression(Bayesian ~ R^2),
y = "Posterior Sample Frequency",
caption = paste0("RMSE = ", round(rmse_rescaled, 3),
" | Bayesian R² = ", round(bayes_r2_median, 3))
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 12, face = "italic", color = "gray30")
)
ggplot(data.frame(y_obs = y_obs_rescaled, y_pred = y_hat_mean_rescaled),
aes(x = y_pred, y = y_obs)) +
geom_point(alpha = 0.3, color = "steelblue", size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "darkred", linewidth = 0.5) +
theme_minimal(base_size = 14) +
labs(
title = "Observed vs Predicted SEG (Rescaled)",
x = "Predicted SEG",
y = "Observed SEG",
caption = paste0("RMSE = ", round(rmse_rescaled, 3),
" | Bayesian R² = ", round(bayes_r2_median, 3))
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 12, face = "italic", color = "gray30")
)
ggplot(data.frame(y_obs = y_obs_rescaled, y_pred = y_hat_mean_rescaled),
aes(x = y_pred, y = y_obs)) +
geom_point(alpha = 0.3, color = "steelblue", size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "darkred", linewidth = 0.5) +
theme_minimal(base_size = 14) +
labs(
title = "Observed vs Predicted SEG",
x = "Predicted SEG",
y = "Observed SEG",
caption = paste0("RMSE = ", round(rmse_rescaled, 3),
" | Bayesian R² = ", round(bayes_r2_median, 3))
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 12, face = "italic", color = "gray30")
)
draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
filter(covariate == 1) %>%
mutate(
beta_rescaled = beta_dept * sd_y / sds_x[[1]]
) %>%
median_qi(beta_rescaled, .width = 0.95) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
ggplot(aes(x = beta_rescaled, y = fct_reorder(department, beta_rescaled))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +  # reference line
geom_errorbarh(aes(xmin = .lower, xmax = .upper), height = 0.25, color = "skyblue4") +
geom_point(size = 2.5, color = "skyblue4") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 11)
) +
labs(
x = "Department-Specific Slope for EIS",
y = "Department",
title = "Varying Slopes for Equity and Social Inclusion Index (EIS)",
subtitle = "Posterior medians with 95% credible intervals"
)
# Heatmap of department-specific slopes ------------------------------------------
# Ensure sd_y and sds_x are defined
sds_x <- sapply(data1[X_vars], sd, na.rm = TRUE)
sd_y <- sd(data1$SEG, na.rm = TRUE)
# Rescale slopes in the heatmap
heat_df <- draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
group_by(dept, covariate) %>%
summarise(mean_slope = mean(beta_dept), .groups = "drop") %>%
mutate(
rescaled_slope = mean_slope * sd_y / sds_x[covariate]
) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
mutate(covariate_label = X_vars[covariate])
# Plot rescaled slopes
ggplot(heat_df, aes(x = covariate_label, y = fct_reorder(department, dept), fill = rescaled_slope)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "darkred", mid = "white", high = "darkblue", midpoint = 0) +
theme_minimal(base_size = 12) +
labs(
title = "Rescaled Mean Department Slopes by Covariate",
x = "Covariate",
y = "Department",
fill = "Effect on SEG"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Table summary of global slopes -------------------------------------------------------------------------
# Standard deviations
sds_x <- sapply(data1[X_vars], sd, na.rm = TRUE)
sd_y <- sd(data1$SEG, na.rm = TRUE)
# Create rescaled summary table
summary_table <- draws %>%
as_draws_df() %>%
select(starts_with("mu_beta")) %>%
pivot_longer(everything(), names_to = "parameter", values_to = "value") %>%
mutate(covariate = as.integer(str_extract(parameter, "\\d+"))) %>%
group_by(covariate) %>%
summarise(
mean = mean(value),
median = median(value),
lower = quantile(value, 0.025),
upper = quantile(value, 0.975),
.groups = "drop"
) %>%
mutate(
label = X_vars[covariate],
rescale_factor = sd_y / sds_x[covariate],
mean = mean * rescale_factor,
median = median * rescale_factor,
lower = lower * rescale_factor,
upper = upper * rescale_factor
) %>%
select(label, mean, median, lower, upper)
# Create a table grob
table_grob <- tableGrob(
summary_table,
rows = NULL
)
# Create title grob
title <- textGrob(
"Rescaled Posterior Summaries for Global Slopes (Effect on SEG)",
gp = gpar(fontsize = 16, fontface = "bold")
)
# Plot the title and table in the Plots panel
grid.newpage()
grid.arrange(title, table_grob, nrow = 2, heights = c(0.1, 1))
# Department-specific slopes ---------------------------------------------------
dept_labels <- data %>%
distinct(dept_id, department) %>%
arrange(dept_id)
draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
filter(covariate == 1) %>%
mutate(
beta_rescaled = beta_dept * sd_y / sds_x[[1]]
) %>%
median_qi(beta_rescaled, .width = 0.95) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
ggplot(aes(x = beta_rescaled, y = fct_reorder(department, beta_rescaled))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +  # reference line
geom_errorbarh(aes(xmin = .lower, xmax = .upper), height = 0.25, color = "skyblue4") +
geom_point(size = 2.5, color = "skyblue4") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 11)
) +
labs(
x = "Department-Specific Slope for EIS",
y = "Department",
title = "Varying Slopes for Equity and Social Inclusion Index (EIS)",
subtitle = "Posterior medians with 95% credible intervals"
)
draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
filter(covariate == 2) %>%
mutate(
beta_rescaled = beta_dept * sd_y / sds_x[[2]]
) %>%
median_qi(beta_rescaled, .width = 0.95) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
ggplot(aes(x = beta_rescaled, y = fct_reorder(department, beta_rescaled))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +  # reference line
geom_errorbarh(aes(xmin = .lower, xmax = .upper), height = 0.25, color = "skyblue4") +
geom_point(size = 2.5, color = "skyblue4") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 11)
) +
labs(
x = "Department-Specific Slope for CTI",
y = "Department",
title = "Varying Slopes for Science, Technology and Innovation Index (CTI)",
subtitle = "Posterior medians with 95% credible intervals"
)
draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
filter(covariate == 3) %>%
mutate(
beta_rescaled = beta_dept * sd_y / sds_x[[3]]
) %>%
median_qi(beta_rescaled, .width = 0.95) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
ggplot(aes(x = beta_dept, y = fct_reorder(department, beta_dept))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +  # reference line
geom_errorbarh(aes(xmin = .lower, xmax = .upper), height = 0.25, color = "skyblue4") +
geom_point(size = 2.5, color = "skyblue4") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 11)
) +
labs(
x = "Department-Specific Slope for PCC",
y = "Department",
title = "Varying Slopes for Productivity, Competitiveness and \nEconomic Complementarity Index (PCC)",
subtitle = "Posterior medians with 95% credible intervals"
)
draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
filter(covariate == 3) %>%
mutate(
beta_rescaled = beta_dept * sd_y / sds_x[[3]]
) %>%
median_qi(beta_rescaled, .width = 0.95) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
ggplot(aes(x = beta_dept, y = fct_reorder(department, beta_dept))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +  # reference line
geom_errorbarh(aes(xmin = .lower, xmax = .upper), height = 0.25, color = "skyblue4") +
geom_point(size = 2.5, color = "skyblue4") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 11)
) +
labs(
x = "Department-Specific Slope for PCC",
y = "Department",
title = "Varying Slopes for Productivity, Competitiveness and \nEconomic Complementarity Index (PCC)",
subtitle = "Posterior medians with 95% credible intervals"
)
draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
filter(covariate == 3) %>%
mutate(
beta_rescaled = beta_dept * sd_y / sds_x[[3]]
) %>%
median_qi(beta_rescaled, .width = 0.95) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
ggplot(aes(x = beta_rescaled, y = fct_reorder(department, beta_rescaled))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +  # reference line
geom_errorbarh(aes(xmin = .lower, xmax = .upper), height = 0.25, color = "skyblue4") +
geom_point(size = 2.5, color = "skyblue4") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 11)
) +
labs(
x = "Department-Specific Slope for PCC",
y = "Department",
title = "Varying Slopes for Productivity, Competitiveness and \nEconomic Complementarity Index (PCC)",
subtitle = "Posterior medians with 95% credible intervals"
)
draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
filter(covariate == 4) %>%
mutate(
beta_rescaled = beta_dept * sd_y / sds_x[[4]]
) %>%
median_qi(beta_rescaled, .width = 0.95) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
ggplot(aes(x = beta_rescaled, y = fct_reorder(department, beta_rescaled))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +  # reference line
geom_errorbarh(aes(xmin = .lower, xmax = .upper), height = 0.25, color = "skyblue4") +
geom_point(size = 2.5, color = "skyblue4") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 11)
) +
labs(
x = "Department-Specific Slope for GPI",
y = "Department",
title = "Varying Slopes for Governance, Participation and \nInstitutions Index (GPI)",
subtitle = "Posterior medians with 95% credible intervals"
)
draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
filter(covariate == 5) %>%
mutate(
beta_rescaled = beta_dept * sd_y / sds_x[[4]]
) %>%
median_qi(beta_rescaled, .width = 0.95) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
ggplot(aes(x = beta_rescaled, y = fct_reorder(department, beta_rescaled))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +  # reference line
geom_errorbarh(aes(xmin = .lower, xmax = .upper), height = 0.25, color = "skyblue4") +
geom_point(size = 2.5, color = "skyblue4") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 11)
) +
labs(
x = "Department-Specific Slope for SOS",
y = "Department",
title = "Varying Slopes for Sustainability Index (SOS)",
subtitle = "Posterior medians with 95% credible intervals"
)
draws %>%
spread_draws(beta_dept[dept, covariate]) %>%
filter(covariate == 5) %>%
mutate(
beta_rescaled = beta_dept * sd_y / sds_x[[4]]
) %>%
median_qi(beta_rescaled, .width = 0.95) %>%
left_join(dept_labels, by = c("dept" = "dept_id")) %>%
ggplot(aes(x = beta_rescaled, y = fct_reorder(department, beta_rescaled))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +  # reference line
geom_errorbarh(aes(xmin = .lower, xmax = .upper), height = 0.25, color = "skyblue4") +
geom_point(size = 2.5, color = "skyblue4") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 11)
) +
labs(
x = "Department-Specific Slope for SOS",
y = "Department",
title = "Varying Slopes for Sustainability Index (SOS)",
subtitle = "Posterior medians with 95% credible intervals"
)
